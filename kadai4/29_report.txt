問題のプログラムを実行する。
    void *p;
    int x;
    p = &x;

与えられたプログラムにはないが、以下を追加して実行する。
    printf("%p\n", (char *) (p));
    printf("%p\n", (int *) (p));
この結果は、たとえば
	0x7fff54418a14
	0x7fff54418a14
となる。これはつまりpというポインタに格納された、xのアドレスである。
char型として読んでもint型として読んでも最初のアドレスは同じである。
次に、
    printf("%p\n", (char *) p + 1);
    printf("%p\n", (int *) p + 1);
を実行すると、
	0x7fff57566a15
	0x7fff57566a18
となる。これは(char *)(p + 1)などと同じで、
char型としてpを読んだときの、先頭から一個次のアドレス、
int型としてpを読んだときの、先頭から一個次のアドレスを表す。
ここからint型は4つ分の、char型は1つ分の幅を持つことがわかる。
つぎに、
    printf("%p\n", (int (*)[4]) p + 1);
はint4つの配列として読んだときのpの1インクリメント後のアドレスだから、16(0x10)だけ増えている。

